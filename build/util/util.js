"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.arrayIntersect = arrayIntersect;
exports.setIntersect = setIntersect;
exports.convertSetToArray = exports.setDiff = exports.arrayDiff = void 0;

const convertSetToArray = s => {
  let retArr = [];
  s.forEach(v => retArr.push(v));
  return retArr;
};

exports.convertSetToArray = convertSetToArray;

const setDiff = (setA, setB) => {
  return new Set([...setA].filter(x => !setB.has(x)));
};

exports.setDiff = setDiff;

const arrayDiff = (arrA, arrB) => {
  let a = new Set(arrA);
  let b = new Set(arrB);
  return convertSetToArray(setDiff(a, b));
};

exports.arrayDiff = arrayDiff;

function setIntersect(...sets) {
  if (!sets.length) return new Set();
  const i = sets.reduce((m, s, i) => s.size < sets[m].size ? i : m, 0);
  const [smallest] = sets.splice(i, 1);
  const res = new Set();

  for (let val of smallest) if (sets.every(s => s.has(val))) res.add(val);

  return res;
}

function arrayIntersect(...arrays) {
  let sets = arrays.map(a => new Set(a));
  return convertSetToArray(setIntersect(...sets));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL3V0aWwuanMiXSwibmFtZXMiOlsiY29udmVydFNldFRvQXJyYXkiLCJzIiwicmV0QXJyIiwiZm9yRWFjaCIsInYiLCJwdXNoIiwic2V0RGlmZiIsInNldEEiLCJzZXRCIiwiU2V0IiwiZmlsdGVyIiwieCIsImhhcyIsImFycmF5RGlmZiIsImFyckEiLCJhcnJCIiwiYSIsImIiLCJzZXRJbnRlcnNlY3QiLCJzZXRzIiwibGVuZ3RoIiwiaSIsInJlZHVjZSIsIm0iLCJzaXplIiwic21hbGxlc3QiLCJzcGxpY2UiLCJyZXMiLCJ2YWwiLCJldmVyeSIsImFkZCIsImFycmF5SW50ZXJzZWN0IiwiYXJyYXlzIiwibWFwIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxNQUFNQSxpQkFBaUIsR0FBSUMsQ0FBRCxJQUFPO0FBQ2hDLE1BQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0FELEVBQUFBLENBQUMsQ0FBQ0UsT0FBRixDQUFVQyxDQUFDLElBQUlGLE1BQU0sQ0FBQ0csSUFBUCxDQUFZRCxDQUFaLENBQWY7QUFDQSxTQUFPRixNQUFQO0FBQ0EsQ0FKRDs7OztBQU1BLE1BQU1JLE9BQU8sR0FBRyxDQUFDQyxJQUFELEVBQU9DLElBQVAsS0FBZ0I7QUFDL0IsU0FBTyxJQUFJQyxHQUFKLENBQVEsQ0FBQyxHQUFHRixJQUFKLEVBQVVHLE1BQVYsQ0FBaUJDLENBQUMsSUFBSSxDQUFDSCxJQUFJLENBQUNJLEdBQUwsQ0FBU0QsQ0FBVCxDQUF2QixDQUFSLENBQVA7QUFDQSxDQUZEOzs7O0FBR0EsTUFBTUUsU0FBUyxHQUFHLENBQUNDLElBQUQsRUFBT0MsSUFBUCxLQUFnQjtBQUNqQyxNQUFJQyxDQUFDLEdBQUcsSUFBSVAsR0FBSixDQUFRSyxJQUFSLENBQVI7QUFDQSxNQUFJRyxDQUFDLEdBQUcsSUFBSVIsR0FBSixDQUFRTSxJQUFSLENBQVI7QUFDQSxTQUFPZixpQkFBaUIsQ0FBQ00sT0FBTyxDQUFDVSxDQUFELEVBQUdDLENBQUgsQ0FBUixDQUF4QjtBQUNBLENBSkQ7Ozs7QUFNQSxTQUFTQyxZQUFULENBQXNCLEdBQUdDLElBQXpCLEVBQStCO0FBQzlCLE1BQUksQ0FBQ0EsSUFBSSxDQUFDQyxNQUFWLEVBQWtCLE9BQU8sSUFBSVgsR0FBSixFQUFQO0FBQ2xCLFFBQU1ZLENBQUMsR0FBR0YsSUFBSSxDQUFDRyxNQUFMLENBQVksQ0FBQ0MsQ0FBRCxFQUFJdEIsQ0FBSixFQUFPb0IsQ0FBUCxLQUFhcEIsQ0FBQyxDQUFDdUIsSUFBRixHQUFTTCxJQUFJLENBQUNJLENBQUQsQ0FBSixDQUFRQyxJQUFqQixHQUF3QkgsQ0FBeEIsR0FBNEJFLENBQXJELEVBQXdELENBQXhELENBQVY7QUFDQSxRQUFNLENBQUNFLFFBQUQsSUFBYU4sSUFBSSxDQUFDTyxNQUFMLENBQVlMLENBQVosRUFBZSxDQUFmLENBQW5CO0FBQ0EsUUFBTU0sR0FBRyxHQUFHLElBQUlsQixHQUFKLEVBQVo7O0FBQ0EsT0FBSyxJQUFJbUIsR0FBVCxJQUFnQkgsUUFBaEIsRUFDQyxJQUFJTixJQUFJLENBQUNVLEtBQUwsQ0FBVzVCLENBQUMsSUFBSUEsQ0FBQyxDQUFDVyxHQUFGLENBQU1nQixHQUFOLENBQWhCLENBQUosRUFDRUQsR0FBRyxDQUFDRyxHQUFKLENBQVFGLEdBQVI7O0FBRUgsU0FBT0QsR0FBUDtBQUNBOztBQUNELFNBQVNJLGNBQVQsQ0FBd0IsR0FBR0MsTUFBM0IsRUFBbUM7QUFDbEMsTUFBSWIsSUFBSSxHQUFHYSxNQUFNLENBQUNDLEdBQVAsQ0FBV2pCLENBQUMsSUFBSSxJQUFJUCxHQUFKLENBQVFPLENBQVIsQ0FBaEIsQ0FBWDtBQUNBLFNBQU9oQixpQkFBaUIsQ0FBQ2tCLFlBQVksQ0FBQyxHQUFHQyxJQUFKLENBQWIsQ0FBeEI7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbnZlcnRTZXRUb0FycmF5ID0gKHMpID0+IHtcblx0bGV0IHJldEFyciA9IFtdXG5cdHMuZm9yRWFjaCh2ID0+IHJldEFyci5wdXNoKHYpKVxuXHRyZXR1cm4gcmV0QXJyXG59XG5cbmNvbnN0IHNldERpZmYgPSAoc2V0QSwgc2V0QikgPT4ge1xuXHRyZXR1cm4gbmV3IFNldChbLi4uc2V0QV0uZmlsdGVyKHggPT4gIXNldEIuaGFzKHgpKSlcbn1cbmNvbnN0IGFycmF5RGlmZiA9IChhcnJBLCBhcnJCKSA9PiB7XG5cdGxldCBhID0gbmV3IFNldChhcnJBKVxuXHRsZXQgYiA9IG5ldyBTZXQoYXJyQilcblx0cmV0dXJuIGNvbnZlcnRTZXRUb0FycmF5KHNldERpZmYoYSxiKSlcbn1cblxuZnVuY3Rpb24gc2V0SW50ZXJzZWN0KC4uLnNldHMpIHtcblx0aWYgKCFzZXRzLmxlbmd0aCkgcmV0dXJuIG5ldyBTZXQoKTtcblx0Y29uc3QgaSA9IHNldHMucmVkdWNlKChtLCBzLCBpKSA9PiBzLnNpemUgPCBzZXRzW21dLnNpemUgPyBpIDogbSwgMCk7XG5cdGNvbnN0IFtzbWFsbGVzdF0gPSBzZXRzLnNwbGljZShpLCAxKTtcblx0Y29uc3QgcmVzID0gbmV3IFNldCgpO1xuXHRmb3IgKGxldCB2YWwgb2Ygc21hbGxlc3QpXG5cdFx0aWYgKHNldHMuZXZlcnkocyA9PiBzLmhhcyh2YWwpKSlcblx0XHRcdCByZXMuYWRkKHZhbCk7XG5cdFxuXHRyZXR1cm4gcmVzXG59XG5mdW5jdGlvbiBhcnJheUludGVyc2VjdCguLi5hcnJheXMpIHtcblx0bGV0IHNldHMgPSBhcnJheXMubWFwKGEgPT4gbmV3IFNldChhKSlcblx0cmV0dXJuIGNvbnZlcnRTZXRUb0FycmF5KHNldEludGVyc2VjdCguLi5zZXRzKSlcbn1cblxuXG5leHBvcnQgeyBhcnJheUludGVyc2VjdCwgYXJyYXlEaWZmLCBzZXRJbnRlcnNlY3QsIHNldERpZmYsIGNvbnZlcnRTZXRUb0FycmF5IH1cbiJdfQ==