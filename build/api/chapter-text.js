"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.chapterText = exports.ridlistText = void 0;

var _book_names = _interopRequireDefault(require("../../data/book_names.json"));

var _termSearch = require("./term-search");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const allowedTexts = ["wlc", "net", "lxx", "sbl"];

const ridlistText = (ridlist, unfilteredParamTexts, db) => {
  const filteredTextList = allowedTexts.filter(t => unfilteredParamTexts.has(t));
  if (filteredTextList.length === 0) filteredTextList.push("net");
  const requestedTextsSet = new Set(filteredTextList);
  return new Promise((resolve, reject) => {
    let ridlistResponse = {}; //TODO: change "in" to {$gte: min, $lt: max}
    //[or at least make it a possibilty
    // - we need the ridlist idea for search results
    // - but definitely not for chapters

    const cursor = db.collection("verse_data").find({
      rid: {
        $in: ridlist
      }
    });
    cursor.each((err, doc) => {
      if (err) console.log("ERROR", err);

      if (doc != null) {
        ridlistResponse[doc["rid"]] = {};
        requestedTextsSet.forEach(text => {
          if (doc.hasOwnProperty(text)) {
            ridlistResponse[doc["rid"]][text] = doc[text];
          }
        });
      } else {
        resolve(ridlistResponse);
      }
    });
  });
};

exports.ridlistText = ridlistText;

const chapterText = (params, db) => {
  const ref = params.reference;
  const unfilteredParamTexts = params["texts"] ? new Set(params["texts"]) : new Set([]);
  let highlights = {};

  if (params.hasOwnProperty("search_terms")) {
    params.search_terms.forEach(st => {
      highlights[st.uid] = (0, _termSearch._wordsThatMatchQuery)(st.data, [ref.book], ref.chapter);
    });
  }

  const minv = _book_names.default[ref.book] * 10000000 + ref.chapter * 1000;
  const maxv = _book_names.default[ref.book] * 10000000 + (ref.chapter + 1) * 1000;
  return new Promise((resolve, reject) => {
    ridlistText(Array.from({
      length: maxv - minv
    }, (v, k) => k + minv), unfilteredParamTexts, db).then(texts => {
      const returnVal = {
        "reference": params.reference,
        "text": texts
      };
      if (Object.keys(highlights).length > 0) returnVal["highlights"] = highlights;
      resolve(returnVal);
    }).catch(err => {
      reject(err);
    });
  });
};

exports.chapterText = chapterText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvY2hhcHRlci10ZXh0LmpzIl0sIm5hbWVzIjpbImFsbG93ZWRUZXh0cyIsInJpZGxpc3RUZXh0IiwicmlkbGlzdCIsInVuZmlsdGVyZWRQYXJhbVRleHRzIiwiZGIiLCJmaWx0ZXJlZFRleHRMaXN0IiwiZmlsdGVyIiwidCIsImhhcyIsImxlbmd0aCIsInB1c2giLCJyZXF1ZXN0ZWRUZXh0c1NldCIsIlNldCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmlkbGlzdFJlc3BvbnNlIiwiY3Vyc29yIiwiY29sbGVjdGlvbiIsImZpbmQiLCJyaWQiLCIkaW4iLCJlYWNoIiwiZXJyIiwiZG9jIiwiY29uc29sZSIsImxvZyIsImZvckVhY2giLCJ0ZXh0IiwiaGFzT3duUHJvcGVydHkiLCJjaGFwdGVyVGV4dCIsInBhcmFtcyIsInJlZiIsInJlZmVyZW5jZSIsImhpZ2hsaWdodHMiLCJzZWFyY2hfdGVybXMiLCJzdCIsInVpZCIsImRhdGEiLCJib29rIiwiY2hhcHRlciIsIm1pbnYiLCJib29rX25hbWVzIiwibWF4diIsIkFycmF5IiwiZnJvbSIsInYiLCJrIiwidGhlbiIsInRleHRzIiwicmV0dXJuVmFsIiwiT2JqZWN0Iiwia2V5cyIsImNhdGNoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUcsQ0FDcEIsS0FEb0IsRUFFcEIsS0FGb0IsRUFHcEIsS0FIb0IsRUFJcEIsS0FKb0IsQ0FBckI7O0FBT0EsTUFBTUMsV0FBVyxHQUFHLENBQUNDLE9BQUQsRUFBVUMsb0JBQVYsRUFBZ0NDLEVBQWhDLEtBQXVDO0FBQzFELFFBQU1DLGdCQUFnQixHQUFHTCxZQUFZLENBQUNNLE1BQWIsQ0FBb0JDLENBQUMsSUFBSUosb0JBQW9CLENBQUNLLEdBQXJCLENBQXlCRCxDQUF6QixDQUF6QixDQUF6QjtBQUNBLE1BQUlGLGdCQUFnQixDQUFDSSxNQUFqQixLQUE0QixDQUFoQyxFQUNDSixn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QyxJQUF6RixDQUErRkMsS0FBRCxJQUFXO0FBQ3hHLFlBQU1DLFNBQVMsR0FBRztBQUNqQixxQkFBYW5CLE1BQU0sQ0FBQ0UsU0FESDtBQUVqQixnQkFBUWdCO0FBRlMsT0FBbEI7QUFJQSxVQUFJRSxNQUFNLENBQUNDLElBQVAsQ0FBWWxCLFVBQVosRUFBd0J6QixNQUF4QixHQUFpQyxDQUFyQyxFQUNDeUMsU0FBUyxDQUFDLFlBQUQsQ0FBVCxHQUEwQmhCLFVBQTFCO0FBQ0RwQixNQUFBQSxPQUFPLENBQUNvQyxTQUFELENBQVA7QUFDQSxLQVJELEVBUUdHLEtBUkgsQ0FRVTlCLEdBQUQsSUFBUztBQUNqQlIsTUFBQUEsTUFBTSxDQUFDUSxHQUFELENBQU47QUFDQSxLQVZEO0FBV0EsR0FaTSxDQUFQO0FBYUEsQ0ExQkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYm9va19uYW1lcyBmcm9tICcuLi8uLi9kYXRhL2Jvb2tfbmFtZXMuanNvbidcbmltcG9ydCB7IF93b3Jkc1RoYXRNYXRjaFF1ZXJ5IH0gZnJvbSAnLi90ZXJtLXNlYXJjaCdcblxuY29uc3QgYWxsb3dlZFRleHRzID0gW1xuXHRcIndsY1wiLFxuXHRcIm5ldFwiLFxuXHRcImx4eFwiLFxuXHRcInNibFwiXG5dXG5cbmNvbnN0IHJpZGxpc3RUZXh0ID0gKHJpZGxpc3QsIHVuZmlsdGVyZWRQYXJhbVRleHRzLCBkYikgPT4ge1xuXHRjb25zdCBmaWx0ZXJlZFRleHRMaXN0ID0gYWxsb3dlZFRleHRzLmZpbHRlcih0ID0+IHVuZmlsdGVyZWRQYXJhbVRleHRzLmhhcyh0KSlcblx0aWYgKGZpbHRlcmVkVGV4dExpc3QubGVuZ3RoID09PSAwKVxuXHRcdGZpbHRlcmVkVGV4dExpc3QucHVzaChcIm5ldFwiKVxuXHRjb25zdCByZXF1ZXN0ZWRUZXh0c1NldCA9IG5ldyBTZXQoZmlsdGVyZWRUZXh0TGlzdClcblxuXHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXHRcdGxldCByaWRsaXN0UmVzcG9uc2UgPSB7fVxuXHRcdC8vVE9ETzogY2hhbmdlIFwiaW5cIiB0byB7JGd0ZTogbWluLCAkbHQ6IG1heH1cblx0XHQvL1tvciBhdCBsZWFzdCBtYWtlIGl0IGEgcG9zc2liaWx0eVxuXHRcdC8vIC0gd2UgbmVlZCB0aGUgcmlkbGlzdCBpZGVhIGZvciBzZWFyY2ggcmVzdWx0c1xuXHRcdC8vIC0gYnV0IGRlZmluaXRlbHkgbm90IGZvciBjaGFwdGVyc1xuXHRcdGNvbnN0IGN1cnNvciA9IGRiLmNvbGxlY3Rpb24oXCJ2ZXJzZV9kYXRhXCIpLmZpbmQoeyByaWQ6IHsgJGluOiByaWRsaXN0IH0gfSlcblx0XHRjdXJzb3IuZWFjaCgoZXJyLCBkb2MpID0+IHtcblx0XHRcdGlmIChlcnIpXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiRVJST1JcIiwgZXJyKVxuXHRcdFx0aWYgKGRvYyAhPSBudWxsKSB7XG5cdFx0XHRcdHJpZGxpc3RSZXNwb25zZVtkb2NbXCJyaWRcIl1dID0ge31cblx0XHRcdFx0cmVxdWVzdGVkVGV4dHNTZXQuZm9yRWFjaCh0ZXh0ID0+IHtcblx0XHRcdFx0XHRpZiAoZG9jLmhhc093blByb3BlcnR5KHRleHQpKSB7XG5cdFx0XHRcdFx0XHRyaWRsaXN0UmVzcG9uc2VbZG9jW1wicmlkXCJdXVt0ZXh0XSA9IGRvY1t0ZXh0XVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc29sdmUocmlkbGlzdFJlc3BvbnNlKVxuXHRcdFx0fVxuXHRcdH0pXG5cdH0pXG59XG5cbmNvbnN0IGNoYXB0ZXJUZXh0ID0gKHBhcmFtcywgZGIpID0+IHtcblx0Y29uc3QgcmVmID0gcGFyYW1zLnJlZmVyZW5jZVxuXHRjb25zdCB1bmZpbHRlcmVkUGFyYW1UZXh0cyA9IHBhcmFtc1tcInRleHRzXCJdID8gbmV3IFNldChwYXJhbXNbXCJ0ZXh0c1wiXSkgOiBuZXcgU2V0KFtdKVxuXG5cdGxldCBoaWdobGlnaHRzID0ge31cblx0aWYgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShcInNlYXJjaF90ZXJtc1wiKSkge1xuXHRcdHBhcmFtcy5zZWFyY2hfdGVybXMuZm9yRWFjaChzdCA9PiB7XG5cdFx0XHRoaWdobGlnaHRzW3N0LnVpZF0gPSBfd29yZHNUaGF0TWF0Y2hRdWVyeShzdC5kYXRhLCBbcmVmLmJvb2tdLCByZWYuY2hhcHRlcilcblx0XHR9KVxuXHR9XG5cblx0Y29uc3QgbWludiA9IGJvb2tfbmFtZXNbcmVmLmJvb2tdICogMTAwMDAwMDAgKyByZWYuY2hhcHRlciAqIDEwMDBcblx0Y29uc3QgbWF4diA9IGJvb2tfbmFtZXNbcmVmLmJvb2tdICogMTAwMDAwMDAgKyAocmVmLmNoYXB0ZXIrMSkgKiAxMDAwXG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0cmlkbGlzdFRleHQoQXJyYXkuZnJvbSh7bGVuZ3RoOiBtYXh2LW1pbnZ9LCAodiwgaykgPT4gayttaW52KSwgdW5maWx0ZXJlZFBhcmFtVGV4dHMsIGRiKS50aGVuKCh0ZXh0cykgPT4ge1xuXHRcdFx0Y29uc3QgcmV0dXJuVmFsID0ge1xuXHRcdFx0XHRcInJlZmVyZW5jZVwiOiBwYXJhbXMucmVmZXJlbmNlLFxuXHRcdFx0XHRcInRleHRcIjogdGV4dHNcblx0XHRcdH1cblx0XHRcdGlmIChPYmplY3Qua2V5cyhoaWdobGlnaHRzKS5sZW5ndGggPiAwKVxuXHRcdFx0XHRyZXR1cm5WYWxbXCJoaWdobGlnaHRzXCJdID0gaGlnaGxpZ2h0c1xuXHRcdFx0cmVzb2x2ZShyZXR1cm5WYWwpXG5cdFx0fSkuY2F0Y2goKGVycikgPT4ge1xuXHRcdFx0cmVqZWN0KGVycilcblx0XHR9KVxuXHR9KVxufVxuZXhwb3J0IHsgcmlkbGlzdFRleHQsIGNoYXB0ZXJUZXh0IH1cbiJdfQ==