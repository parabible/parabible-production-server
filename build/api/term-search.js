"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports._wordsThatMatchQuery = exports.collocationSearch = exports.termSearch = void 0;

var _util = require("../util/util");

var _uniqueValuePerArray = require("../util/uniqueValuePerArray");

var _chapterText = require("./chapter-text");

var _word_data_map = _interopRequireDefault(require("../../data/word_data_map"));

var _tree_data = _interopRequireDefault(require("../../data/tree_data"));

var _range_node_data = _interopRequireDefault(require("../../data/range_node_data"));

var _book_names = _interopRequireDefault(require("../../data/book_names"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const RESULT_LIMIT = 500;
const doLog = false;

const consoleLog = (...debug) => {
  if (doLog) {
    console.log(...debug);
  }
};

const heatUpVerseWords = (verse_words, hot_set, lukewarm_set) => {
  return verse_words.map(accentUnit => accentUnit.map(w => {
    if (hot_set.has(w["wid"])) w["temperature"] = 2;else if (lukewarm_set.has(w["wid"])) w["temperature"] = 1;
    return w;
  }));
};

const _doFilter = (filter, wordNodes, chapterFilter = 0) => {
  if (filter.length > 0) {
    const chapterOffset = chapterFilter * 1000;
    const ridFilter = filter.map(f => _book_names.default[f] * 10000000 + chapterOffset);
    const extent = chapterFilter === 0 ? 10000000 : 1000;
    return wordNodes.filter(w => {
      const rid = _tree_data.default[w].verse;
      return ridFilter.reduce((a, v) => a || v <= rid && rid < v + extent, false);
    });
  } else {
    return wordNodes;
  }
};

const _wordsThatMatchQuery = (query, filter, chapterFilter = 0) => {
  let query_matches = [];
  Object.keys(query).forEach(k => {
    const v = query[k].normalize();

    if (!_word_data_map.default.hasOwnProperty(k) || !_word_data_map.default[k].hasOwnProperty([v])) {
      throw {
        "error": `Sorry but '${k}'='${v}' does not exist in the word data.`
      };
    }

    query_matches.push(_doFilter(filter, _word_data_map.default[k][v], chapterFilter));
  });
  return (0, _util.arrayIntersect)(...query_matches);
};

exports._wordsThatMatchQuery = _wordsThatMatchQuery;

const _queryForWids = ({
  queryArray,
  search_range,
  search_filter
}) => {
  let word_matches = [];
  let exclusions = [];
  let current_match = -1;
  let starttime = process.hrtime();
  queryArray.forEach(query => {
    consoleLog("BENCHMARK Q: foreach cycle ", process.hrtime(starttime));

    const query_matches = _wordsThatMatchQuery(query.data, search_filter);

    if (query.invert) exclusions.push(...query_matches);else word_matches.push(query_matches);
  });
  consoleLog("BENCHMARK Q: done with foreach", process.hrtime(starttime));
  const sr_matches = word_matches.map(m => m.map(n => _tree_data.default[n][search_range]));
  const sr_exclusions = exclusions.map(m => _tree_data.default[m][search_range]);
  const match_intersection = (0, _util.arrayIntersect)(...sr_matches);
  const range_matches = (0, _util.arrayDiff)(match_intersection, sr_exclusions);
  consoleLog("BENCHMARK Q: done intersecting", process.hrtime(starttime));
  const word_match_indices_map = word_matches.map(w => w.reduce((a, v) => {
    if (!a.hasOwnProperty(_tree_data.default[v][search_range])) a[_tree_data.default[v][search_range]] = [];

    a[_tree_data.default[v][search_range]].push(v);

    return a;
  }, {}));
  const range_matches_with_unique_limit = range_matches.map((r, i) => {
    const word_match_indices = word_match_indices_map.map((w, i) => w[r]);
    const should_include = (0, _uniqueValuePerArray.uniqueValuePerArray)(word_match_indices) ? word_match_indices : false;
    return {
      sr_node: r,
      matching_word_nodes: should_include
    };
  }).filter(m => m && m.matching_word_nodes !== false);
  consoleLog("BENCHMARK Q: query el indep. repr.", process.hrtime(starttime));
  consoleLog("RESULTS:", range_matches_with_unique_limit.length);
  return range_matches_with_unique_limit;
};

const termSearch = (params, db) => {
  return new Promise((resolve, reject) => {
    let starttime = process.hrtime();
    consoleLog("BENCHMARK: **querying for WIDS", process.hrtime(starttime));

    const matches = _queryForWids({
      queryArray: params["query"],
      search_range: params["search_range"] || "clause",
      search_filter: params["search_filter"] || []
    });

    let truncated = false;

    if (matches.length > RESULT_LIMIT) {
      truncated = matches.length;
      matches.splice(RESULT_LIMIT);
    }

    consoleLog("BENCHMARK: **getting matching word sets", process.hrtime(starttime));
    const words_in_matching_ranges_set = new Set(matches.reduce((c, m) => c.concat(..._range_node_data.default[m.sr_node]["wids"]), []));
    const all_word_matches = matches.reduce((c, n) => c.concat(...n.matching_word_nodes), []);
    const actual_matching_words_set = new Set((0, _util.arrayIntersect)(all_word_matches, words_in_matching_ranges_set)); // Allowed texts

    const paramTexts = params["texts"] || [];
    const allowedTexts = ["wlc", "net", "lxx"];
    let textsToReturn = allowedTexts.filter(f => paramTexts.indexOf(f) !== -1);
    if (textsToReturn.length === 0) textsToReturn = ["wlc", "net"];
    consoleLog("BENCHMARK: **now formulating final data", process.hrtime(starttime));
    const ridmatches = matches.reduce((c, n) => c.concat(..._range_node_data.default[n.sr_node]["rids"]), []);
    (0, _chapterText.ridlistText)(ridmatches, new Set(textsToReturn), db).then(ridMatchText => {
      const heatedMatchText = ridMatchText.map(matchingObject => {
        matchingObject["wlc"] = heatUpVerseWords(matchingObject["wlc"], actual_matching_words_set, words_in_matching_ranges_set);
        return matchingObject;
      });
      consoleLog("BENCHMARK: **results now being processed", process.hrtime(starttime));
      const match_result_data = matches.map(m => {
        const ridTextArray = [];

        _range_node_data.default[m.sr_node]["rids"].forEach(rid => {
          ridTextArray.push(heatedMatchText.find(t => t.rid === rid));
        });

        return {
          "node": m.sr_node,
          "verses": _range_node_data.default[m.sr_node]["rids"],
          "text": ridTextArray
        };
      });
      const response = {
        "truncated": truncated,
        "results": match_result_data
      };
      resolve(response);
      consoleLog("BENCHMARK: **done", process.hrtime(starttime));
      consoleLog(`TermSearch: ${match_result_data.length} results (${process.hrtime(starttime)})`);
    }).catch();
  });
};

exports.termSearch = termSearch;

const collocationSearch = params => {
  const grouping_key = "voc_utf8";
  return new Promise((resolve, reject) => {
    // TODO: the syntax of _queryForWids has changed since this line...
    // !!!!!!!!!!!!!!
    const {
      word_matches
    } = _queryForWids({
      queryArray: params["query"],
      search_range: params["search_range"]
    }); // params["whitelist"] == ["Verb"]


    const word_match_morph = word_matches.map(wid => _word_data_map.default[wid][grouping_key]);
    const tally_match_data = word_match_morph.reduce((c, k) => {
      if (!c.hasOwnProperty(k)) c[k] = 0;
      c[k]++;
      return c;
    }, {});
    const response = {
      "length": Object.keys(tally_match_data).length,
      "results": tally_match_data
    };
    resolve(response);
  });
};

exports.collocationSearch = collocationSearch;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,